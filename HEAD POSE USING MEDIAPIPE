import cv2
import mediapipe as mp
import numpy as np

mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.6)
cap = cv2.VideoCapture(0)

while cap.isOpened():
    success, image = cap.read()

    # Flip the image horizontally for a later selfie-view display
    # Also convert the color space from BGR to RGB
    image = cv2.cvtColor(cv2.flip(image, 1), cv2.COLOR_BGR2RGB)

    
    #TO STOP MAKING MODIFCATIONS
    image.flags.writeable = False

    # Get the result
    results = face_mesh.process(image)

    image.flags.writeable = True

    # OPENCV IS RGB AND MEDIAPIPE IS BGR
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    img_h, img_w, img_c = image.shape
    face_3d = []
    face_2d = []

    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:
            top_landmark_indices = [10, 152, 159, 145, 153, 144, 155, 151, 158]
            for idx, lm in enumerate(face_landmarks.landmark):
                if idx in top_landmark_indices:
                    x, y = int(lm.x * img_w), int(lm.y * img_h)

                    # Get the 2D Coordinates
                    face_2d.append([x, y])

                    # Get the 3D Coordinates
                    face_3d.append([x, y, lm.z])

        
            face_2d = np.array(face_2d, dtype=np.float64)

            
            face_3d = np.array(face_3d, dtype=np.float64)

            
            focal_length = 1 * img_w

            cam_matrix = np.array([[focal_length, 0, img_h / 2],
                                   [0, focal_length, img_w / 2],
                                   [0, 0, 1]])

          
            dist_matrix = np.zeros((4, 1), dtype=np.float64)

            
            success, rot_vec, trans_vec = cv2.solvePnP(
                face_3d, face_2d, cam_matrix, dist_matrix)

            #ROTATIONAL MATRIX
            rmat, jac = cv2.Rodrigues(rot_vec)

            # Get angles
            angles, mtxR, mtxQ, Qx, Qy, Qz = cv2.RQDecomp3x3(rmat)

            # Get the y rotation degree
            x = angles[0] * 360
            y = angles[1] * 360

            
            if y < -10:
                text = "Looking Left"
            elif y > 10:
                text = "Looking Right"
            elif x < -10:
                text = "Looking Down"
            elif 20 <= x <= 32:
                text = "Looking Up"
            else:
                text = "Forward"

            
            cv2.putText(image, text, (20, 20), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (0, 0, 255), 2)

    cv2.imshow('Head Pose Estimation', image)

    if cv2.waitKey(5) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
